(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#e090d7" "#8cc4ff" "#eeeeec"])
 '(custom-enabled-themes '(manoj-dark))
 '(ediff-split-window-function 'split-window-horizontally)
 '(package-selected-packages '(## magit magit-svn company dumb-jump)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
;;(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
(require 'animate)


;;Bookmarks just like VisualStudio
(add-to-list 'load-path "~/.emacs.d/downloads/bm")
(require 'bm)
(global-set-key (read-kbd-macro "C-`") 'bm-toggle)
(global-set-key (read-kbd-macro "C-<tab>") 'bm-next)
(setq bm-cycle-all-buffers t)


;;put this in your ‘~/.emacs’:

;;yet another snippet, Emacs code completion
(add-to-list 'load-path "~/.emacs.d/downloads/yasnippet")
(require 'yasnippet)
;;install snippets in following path
(add-to-list 'load-path "~/.emacs.d/snippets/yasnippet-snippets")
(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"                 ;; personal snippets
        ;;"/path/to/some/collection/"           ;; foo-mode and bar-mode snippet collection
        ;;"/path/to/yasnippet/yasmate/snippets" ;; the yasmate collection
        ))
(yas-global-mode 1)
;;after that type M-x yas-reload-all , and then you are good to go!!



(defalias 'W  'rw )  ; Return-To-Window-Config-
(defalias 'W2 'rw2)  ; Return-To-Window-Config-
(defalias 'W3 'rw3)  ; Return-To-Window-Config-
(defalias 'W4 'rw4)  ; Return-To-Window-Config-4
(defalias 'W5 'rw5)  ; Return-To-Window-Config-
(defalias 'W6 'rw6)  ; Return-To-Window-Config-

(defalias 'rw  (read-kbd-macro "C-x r j w")) ; Return-To-Window-Config-
(defalias 'rw2 (read-kbd-macro "C-x r j 5")) ; Return-To-Window-Config-
(defalias 'rw3 (read-kbd-macro "C-x r j 6")) ; Return-To-Window-Config-
(defalias 'rw4 (read-kbd-macro "C-x r j 7")) ; Return-To-Window-Config-4
(defalias 'rw5 (read-kbd-macro "C-x r j 8")) ; Return-To-Window-Config-5
(defalias 'rw6 (read-kbd-macro "C-x r j 9")) ; Return-To-Window-Config-5


(defalias 'sw  (read-kbd-macro "C-x r w w")) ; Set-Window-Config-w    in: reg w
(defalias 'sw2 (read-kbd-macro "C-x r w 5")) ; Set-Window-Config-w2 + 3 = reg 5
(defalias 'sw3 (read-kbd-macro "C-x r w 6")) ; Set-Window-Config-w3 + 3 = reg 6
(defalias 'sw4 (read-kbd-macro "C-x r w 7")) ; Set-Window-Config-w4 + 3 = reg 7
(defalias 'sw5 (read-kbd-macro "C-x r w 8")) ; set-window-Config-w5 + 3 = reg 8
(defalias 'sw6 (read-kbd-macro "C-x r w 9")) ; set-window-Config-w6 + 3 = reg 9

;my own stuff
;;(defalias 'iap (read-kbd-macro "<<info-apropos>>"))
(defalias 'ggg "grep -r --exclude-dir=.git ")
(defalias 'rab (read-kbd-macro "<<bm-remove-all-all-buffers>>")) ;; Remove All Bookmarks
(defalias 'sss (read-kbd-macro "C-u M-x shell"))
(defalias 'ooo (read-kbd-macro "C-u 100 C-x }"))
(defalias 'iii (read-kbd-macro "C-u 100 C-^ }"))
(defalias 'aaa (read-kbd-macro "M-! run_sim.sh"))
(defalias 'vvv (read-kbd-macro "M-! show_waves.sh"))
(defalias 'gde (read-kbd-macro "C-x C-f ~/.emacs"))
(defalias 'gdep (read-kbd-macro "C-x 1 C-x C-f ~/.emacs RET C-x 3 C-x o C-x C-f c:/mydev/myPreciousLib RET C-x 2 C-x o C-x C-f c:/mydev RET C-x o"))
(defalias 'lde (read-kbd-macro "M-x load-file RET ~/.emacs")) 
(defalias 'dddr (read-kbd-macro "C-x 3 C-x o C-x d"));;dired from current shell to the right
(defalias 'vghome (read-kbd-macro "C-x C-f c:/mydev/myPreciousLib"))
(defalias 'sssr (read-kbd-macro "C-x 3 C-x o M-x sss")) ;;open a shell from current dired buffer on
(defalias 'sssd (read-kbd-macro "C-x 2 C-x o M-x sss")) ;;open a shell from current dired buffer on
(defalias 'getc (read-kbd-macro "C-x 3 C-x o C-x C-f c:/mydev/myPreciousLib/emacs_customization/emacs.txt")) ;; Get the clone
(defalias 'gss "git status .")
(defalias 'grf "git checkout HEAD -- ");; Git Reset File -- file.txt to input.
(defalias 'uuu (read-kbd-macro "C-x 1 C-x C-f c:/mydev/myPreciousLib/udemy_stuff RET C-x 3 C-x o C-x C-f c:/mydev/myPreciousLib/vhdl_fsm RET C-x 3 C-x o C-x C-f c:/mydev/myPreciousLib/unsigned_counter RET C-x +")) ;;open 3 dired side to side at specific files location
(defalias 'k2 (read-kbd-macro "C-x k RET C-x o C-x k RET"))
(defalias 'chan (read-kbd-macro "M-x uuu RET C-x 0 M-x sssd RET C-x o M-x sssd RET C-x + cd .. RET cd .. RET"))

;;info-apropos is usefull
;;C-h f , for emacs function checkup


;;some stuff i found on the internet
;;Note "<<my_fct>>" = "M-x my_fct RET"
(defalias 'B (read-kbd-macro "<<ediff-buffers>> 2*RET <<t1>>"))
(defalias 'B- (read-kbd-macro "C-x o <<B>>"))
(defalias 'b- 'B-) ; Diff-Previous
(defalias 'D (read-kbd-macro "<<ediff-directories>>"))
;;need psvn for the next one.
(defalias 'R (read-kbd-macro "<<svn-file-show-svn-ediff>> C-x 5 o C-x 5 o <<t1>>")) ; Diff-Current
(defalias 'R0  (read-kbd-macro "C-0 M-x svn-file-show-svn-ediff RET C-u C-x q")) ; Diff-Revision
(defalias 'RP (read-kbd-macro "C-x v ~ prev RET <<B>>")) ; Diff-Previous
(defalias 'Rp 'RP)  ; Diff-Previous
(defalias 'my_truncate   (read-kbd-macro "C-1 <<toggle-truncate-lines>>"))
(defalias 'my_truncate2 (read-kbd-macro "C-x 5 o <<my_truncate>> C-x o <<my_truncate>> C-x 5 o"))
(defalias 't1 'my_truncate2); Truncate lines in both buffers 
(defalias 'E (read-kbd-macro "<<ediff-revision>>")) ;; Ediff-Last -Rev.
(defalias 'E0 (read-kbd-macro "C-0 <<ediff-revision>> C-u C-x q RET C-u C-x RET")) ;; Ediff-Specific-Rev

;;change theme
(defalias 'turn-on-the-light (read-kbd-macro "<<load-theme>> dichromacy"))
(defalias 'turn-off-the-light (read-kbd-macro "<<load-theme>> manoj-dark"))
;;(load-theme 'sanityinc-tomorrow-day t)
;;(load-theme 'sanityinc-tomorrow-night t)

;;(windmove-default-keybindings) ;;to change window super fast, Shift + Arrows

;;(add-to-list 'load-path "~/.emacs.d/elpa/psvn")
;;(require 'psvn)

;; M-x global-linum-mode

;;Display line number on the left
(global-linum-mode t)
;;To prevent Emacs to open a new window when invoking a new shell
(push (cons "\\*shell\\*" display-buffer--same-window-action) display-buffer-alist)
;;Whats that one again? not sure
(setq dired-dwim-target t)


(url-handler-mode)


;;for macosx
(setq mac-option-modifier 'super)
(setq mac-command-modifier 'meta)

(global-display-line-numbers-mode 1)

(setq ring-bell-function 'ignore)


;;C-x C-q to unlock the dired window
;;C-c C-x when done

;;universal-ctags
;;https://www.emacswiki.org/emacs/BuildTags
;;https://github.com/universal-ctags/ctags

;;after building/installing it
;; cd /path/to/my/project
;;  ctags -e -R . *.sv *.svh
;;  ctags -e -R --languages=systemverilog
;;  ctags -e -R --languages=vhdl

;; TAGS setup, where to find TAGS file, giving paths
(setq tags-table-list
      '("/way_to/path/path1" "/way_to/path/path2"))



;;The internet is really great
(icomplete-mode) ; TODO: Add condition since this replaces iswitchb-mode >= emacs-24.4
;;(iswitchb-mode)

;;rename current buffer
;;C-x x r 

;;custom keybindings
(local-set-key [C-up] 'backward-paragraph)
(local-set-key [C-down] 'forward-paragraph)
(local-set-key [C-x x r] 'rename-buffer)

;;To bind a key simply:
;;M-x local-set-key RET key cmd RET.
;;the trick to copy it back to .emacs : C-x ESC ESC C-a C-k C-g

;;ibuffer
(global-set-key (kbd "C-x C-b") 'ibuffer) ; instead of buffer-list
(setq ibuffer-expert t) ; stop yes no prompt on delete

 (setq ibuffer-saved-filter-groups
	  (quote (("default"
		   ("dired" (mode . dired-mode))
		   ("shell" (mode . shell-mode))
		    ("magit" (name . "^magit"))
		   ("planner" (or
				(name . "^\\*Calendar\\*$")
				(name . "^\\*Org Agenda\\*")))
		   ("emacs" (or
			     (name . "^\\*scratch\\*$")
			     (name . "^\\*Messages\\*$")))))))

(add-hook 'ibuffer-mode-hook
	  (lambda ()
	    (ibuffer-switch-to-saved-filter-groups "default")))

;;to prevent the annoying "Buffer shell123 has a running process; kill it? (yes or no)
(setq kill-buffer-query-functions nil)

