#this is to be copied in ~/.emacs
#Vincent Gosselin, 2024.

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#e090d7" "#8cc4ff" "#eeeeec"])
 '(custom-enabled-themes '(manoj-dark))
 '(package-selected-packages '(dumb-jump)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
(require 'animate)
;; all i did was to "load-file animate.el" command.
;; after that I modified .emacs to include the animate package
;; after that I use "load-file ~/.emacs command. 


rm -f TAGS
find . -name "*.[ch]" -print | xargs etags -a


cd /path/to/source-root
find . -name "*.cpp" -print -or -name "*.h" -print | xargs etags --append

#grep the fuckout
grep  -nH --null dut  *.sv


;my own stuff
(defalias 'wss (read-kbd-macro "M-x window-swap-states"))


; Window configuration setters/
(defalias 'W  'rw )  ; Return-To-Window-Config-
(defalias 'W2 'rw2)  ; Return-To-Window-Config-
(defalias 'W3 'rw3)  ; Return-To-Window-Config-
(defalias 'W4 'rw4)  ; Return-To-Window-Config-4
(defalias 'W5 'rw5)  ; Return-To-Window-Config-

(defalias 'rw  (read-kbd-macro "C-x r j w")) ; Return-To-Window-Config-
(defalias 'rw2 (read-kbd-macro "C-x r j 5")) ; Return-To-Window-Config-
(defalias 'rw3 (read-kbd-macro "C-x r j 6")) ; Return-To-Window-Config-
(defalias 'rw4 (read-kbd-macro "C-x r j 7")) ; Return-To-Window-Config-4
(defalias 'rw5 (read-kbd-macro "C-x r j 8")) ; Return-To-Window-Config-5

(defalias 'sw  (read-kbd-macro "C-x r w w")) ; Set-Window-Config-w    in: reg w
(defalias 'sw2 (read-kbd-macro "C-x r w 5")) ; Set-Window-Config-w2 + 3 = reg 5
(defalias 'sw3 (read-kbd-macro "C-x r w 6")) ; Set-Window-Config-w3 + 3 = reg 6
(defalias 'sw4 (read-kbd-macro "C-x r w 7")) ; Set-Window-Config-w4 + 3 = reg 7
(defalias 'sw5 (read-kbd-macro "C-x r w 8")) ; Set-Window-Config-w5 + 3 = reg 8


;my own stuff
(defalias 'wss (read-kbd-macro "M-x window-swap-states"))
(defalias 'sss (read-kbd-macro "C-u M-x shell"))
(defalias 'ooo (read-kbd-macro "C-u 100 C-x }"))
(defalias 'iii (read-kbd-macro "C-u 100 C-^ }"))
(defalias 'aaa (read-kbd-macro "M-! run_sim.sh"))
(defalias 'vvv (read-kbd-macro "M-! show_waves.sh"))
(defalias 'gde (read-kbd-macro "C-x C-f ~/.emacs"))
(defalias 'lde (read-kbd-macro "M-x load-file RET ~/.emacs")) 
(defalias 'ddd (read-kbd-macro "C-x 3 C-x o C-x d"));;open dired from current shell on the right side.
(defalias 'vghome (read-kbd-macro "C-x C-f c:/mydev/myPreciousLib")) ;;myprecious, soooo precious
(defalias 'sssr (read-kbd-macro "C-x 3 C-x o M-x sss")) ;;open a shell from current dired buffer on the right.
(defalias 'sssd (read-kbd-macro "C-x 2 C-x o M-x sss")) ;;open a shell from current dired buffer down.


(windmove-default-keybindings) ;;to change window super fast, Shift + Arrows

;; M-x global-linum-mode
(global-linum-mode t)
(push (cons "\\*shell\\*" display-buffer--same-window-action) display-buffer-alist)
(setq dired-dwim-target t) ;; open 2 dired windows, SHIFT-C to copy over the files.x


;; My ediff customizations
;; how to use this :
;; in Dired (C-x d RET)
;; mark files with "m", unmark them with "u"
;; to diff them use "="
;; fall into the ediff buffer
;; "q" to quit and come back to previous screen


(defun dired-ediff-marked-files ()
  "Compare two marked files in Dired with ediff."
  (interactive)
  (let ((marked-files (dired-get-marked-files)))
    (unless (= (length marked-files) 2)
      (error "You need to mark exactly two files to compare"))
    (ediff-files (car marked-files) (cadr marked-files))))

;; Compare marked files using =
(with-eval-after-load 'dired
  (define-key dired-mode-map "=" nil)
  (define-key dired-mode-map "=" 'dired-ediff-marked-files))

;; Ignore whitespace while comparing files
(setq ediff-diff-options "-w")

;; Split windows vertically
(setq ediff-split-window-function 'split-window-horizontally)

;; Restore window configuration after ediff exits
(defvar my-ediff-bwin-config nil "Window configuration before ediff.")
(defcustom my-ediff-bwin-reg ?b
  "*Register to be set up to hold `my-ediff-bwin-config'
        configuration.")

(defun my-ediff-bsh ()
  "Function to be called before any buffers or window setup for
        ediff."
  (setq my-ediff-bwin-config (current-window-configuration))
  (when (characterp my-ediff-bwin-reg)
    (set-register my-ediff-bwin-reg
                  (list my-ediff-bwin-config (point-marker)))))

(defun my-ediff-qh ()
  "Function to be called when ediff quits."
  (when my-ediff-bwin-config
    (set-window-configuration my-ediff-bwin-config)))

(add-hook 'ediff-before-setup-hook 'my-ediff-bsh)
(add-hook 'ediff-quit-hook 'my-ediff-qh)
