(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#e090d7" "#8cc4ff" "#eeeeec"])
 '(custom-enabled-themes '(manoj-dark))
 '(ediff-split-window-function 'split-window-horizontally))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;;put this in your ‘~/.emacs’:

;;disable linux bell
(setq ring-bell-function 'ignore)

;;Bookmarks just like VisualStudio, requires emacs 26
(add-to-list 'load-path "~/.emacs.d/downloads/bm")
(require 'bm)
(global-set-key (read-kbd-macro "C-`") 'bm-toggle)
(global-set-key (read-kbd-macro "C-<tab>") 'bm-next)
(setq bm-cycle-all-buffers t)

;;Not really using it right now, but i keep it here...
;;yet another snippet, Emacs code completion
(add-to-list 'load-path "~/.emacs.d/downloads/yasnippet")
(require 'yasnippet)
;;install snippets in following path
(add-to-list 'load-path "~/.emacs.d/snippets/yasnippet-snippets")
(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"                 ;; personal snippets
        ;;"/path/to/some/collection/"           ;; foo-mode and bar-mode snippet collection
        ;;"/path/to/yasnippet/yasmate/snippets" ;; the yasmate collection
        ))
(yas-global-mode 1)
;;after that type M-x yas-reload-all , and then you are good to go!!

;;For python : C-c C-p to start the python shell
(defalias 'py  'python-shell-send-buffer )

(defalias 'W  'rw )  ; Return-To-Window-Config-
(defalias 'W2 'rw2)  ; Return-To-Window-Config-
(defalias 'W3 'rw3)  ; Return-To-Window-Config-
(defalias 'W4 'rw4)  ; Return-To-Window-Config-4
(defalias 'W5 'rw5)  ; Return-To-Window-Config-
(defalias 'W6 'rw6)  ; Return-To-Window-Config-

(defalias 'rw  (read-kbd-macro "C-x r j w")) ; Return-To-Window-Config-
(defalias 'rw2 (read-kbd-macro "C-x r j 5")) ; Return-To-Window-Config-
(defalias 'rw3 (read-kbd-macro "C-x r j 6")) ; Return-To-Window-Config-
(defalias 'rw4 (read-kbd-macro "C-x r j 7")) ; Return-To-Window-Config-4
(defalias 'rw5 (read-kbd-macro "C-x r j 8")) ; Return-To-Window-Config-5
(defalias 'rw6 (read-kbd-macro "C-x r j 9")) ; Return-To-Window-Config-5

(defalias 'sw  (read-kbd-macro "C-x r w w")) ; Set-Window-Config-w    in: reg w
(defalias 'sw2 (read-kbd-macro "C-x r w 5")) ; Set-Window-Config-w2 + 3 = reg 5
(defalias 'sw3 (read-kbd-macro "C-x r w 6")) ; Set-Window-Config-w3 + 3 = reg 6
(defalias 'sw4 (read-kbd-macro "C-x r w 7")) ; Set-Window-Config-w4 + 3 = reg 7
(defalias 'sw5 (read-kbd-macro "C-x r w 8")) ; set-window-Config-w5 + 3 = reg 8
(defalias 'sw6 (read-kbd-macro "C-x r w 9")) ; set-window-Config-w6 + 3 = reg 9

;my own stuff
;;(defalias 'iap (read-kbd-macro "<<info-apropos>>"))
(defalias 'ggg "grep -r --exclude-dir=.git ")
(defalias 'rab (read-kbd-macro "<<bm-remove-all-all-buffers>>")) ;; Remove All Bookmarks
(defalias 'sss (read-kbd-macro "C-u M-x shell"))
(defalias 'aaa (read-kbd-macro "M-! run_sim.sh"))
(defalias 'vvv (read-kbd-macro "M-! show_waves.sh"))
(defalias 'gde (read-kbd-macro "C-x C-f ~/.emacs"))
(defalias 'gdep (read-kbd-macro "C-x 1 C-x C-f ~/.emacs RET C-x 3 C-x o C-x C-f c:/mydev/myPreciousLib RET C-x 2 C-x o C-x C-f c:/mydev RET C-x o"))
(defalias 'lde (read-kbd-macro "M-x load-file RET ~/.emacs")) 
(defalias 'dddr (read-kbd-macro "C-x 3 C-x o C-x d"));;dired from current shell to the right
(defalias 'vghome (read-kbd-macro "C-x C-f c:/mydev/myPreciousLib"))
(defalias 'sssr (read-kbd-macro "C-x 3 C-x o M-x sss")) ;;open a shell from current dired buffer on
(defalias 'sssd (read-kbd-macro "C-x 2 C-x o M-x sss")) ;;open a shell from current dired buffer on
(defalias 'getc (read-kbd-macro "C-x 3 C-x + C-x o C-x C-f /Users/vincentgosselin1/Desktop/myPreciousLib/emacs_customization/emacs.txt RET C-x o")) ;; Get the clone
(defalias 'gss "git status .")
(defalias 'grf "git checkout HEAD -- ");; Git Reset File -- file.txt to input.

;;info-apropos is usefull
;;C-h f , for emacs function checkup
;;C-h b , for emacs bindings

;;some stuff i found on the internet
;;Note "<<my_fct>>" = "M-x my_fct RET"
(defalias 'B (read-kbd-macro "<<ediff-buffers>> 2*RET <<t1>>"))
(defalias 'B- (read-kbd-macro "C-x o <<B>>"))
(defalias 'b- 'B-) ; Diff-Previous
(defalias 'D (read-kbd-macro "<<ediff-directories>>"))
;;need psvn for the next one.
(defalias 'R (read-kbd-macro "<<svn-file-show-svn-ediff>> C-x 5 o C-x 5 o <<t1>>")) ; Diff-Current
(defalias 'R0  (read-kbd-macro "C-0 M-x svn-file-show-svn-ediff RET C-u C-x q")) ; Diff-Revision
(defalias 'RP (read-kbd-macro "C-x v ~ prev RET <<B>>")) ; Diff-Previous
(defalias 'Rp 'RP)  ; Diff-Previous
(defalias 'my_truncate   (read-kbd-macro "C-1 <<toggle-truncate-lines>>"))
(defalias 'my_truncate2 (read-kbd-macro "C-x 5 o <<my_truncate>> C-x o <<my_truncate>> C-x 5 o"))
(defalias 't1 'my_truncate2); Truncate lines in both buffers
(defalias 'E (read-kbd-macro "<<ediff-revision>>")) ;; Ediff-Last -Rev.
(defalias 'E0 (read-kbd-macro "C-0 <<ediff-revision>> C-u C-x q RET C-u C-x RET")) ;; Ediff-Specific-Rev

;;change theme
(defalias 'turn-on-the-light (read-kbd-macro "<<load-theme>> dichromacy"))
(defalias 'turn-off-the-light (read-kbd-macro "<<load-theme>> manoj-dark"))

(windmove-default-keybindings) ;;to change window super fast, Shift + Arrows

;;I'm a noob i still cant use psvn ;( 
;;(add-to-list 'load-path "~/.emacs.d/elpa/psvn")
;;(require 'psvn)


;;;;;;;;;;;;;;;;;;;;;;;
;; ;;for macosx only ;;
;;;;;;;;;;;;;;;;;;;;;;;
(setq mac-option-modifier 'super)
(setq mac-command-modifier 'meta)
;;;;;;;;;;;;;;;;;;;;;;;;
;; end macosx section ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;
;; Linux Debian only ;;
;;;;;;;;;;;;;;;;;;;;;;;
;;for debian
;;(push (cons "\\*shell\\*" display-buffer--same-window-action) display-buffer-alist)
;;(setq  x-meta-keysym 'super)
;;(setq  x-super-keysym 'meta)
;;(setq ring-bell-function 'ignore)
;;;;;;;;;;;;;;;;;;;;;;;;
;; end debian section ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;;Important stuff!
(global-display-line-numbers-mode 1)
(setq ring-bell-function 'ignore)
(url-handler-mode)

;;C-x C-q to unlock the dired window
;;C-c C-x when done

;;The internet is really great
(icomplete-mode) ; TODO: Add condition since this replaces iswitchb-mode >= emacs-24.4
;;(iswitchb-mode)

;;rename current buffer
;;M-x rb 
(defalias 'rb 'rename-buffer)

;;custom keybindings
(local-set-key [C-up] 'backward-paragraph)
(local-set-key [C-down] 'forward-paragraph)
(local-set-key [C-x x r] 'rename-buffer)

;;To bind a key simply:
;;M-x local-set-key RET key cmd RET.
;;the trick to copy it back to .emacs : C-x ESC ESC C-a C-k C-g

;;ibuffer
(global-set-key (kbd "C-x C-b") 'ibuffer) ; instead of buffer-list
(setq ibuffer-expert t) ; stop yes no prompt on delete

 (setq ibuffer-saved-filter-groups
	  (quote (("default"
		   ("dired" (mode . dired-mode))
		   ("shell" (mode . shell-mode))
		   ("vhd" (mode . vhdl-mode))
		   ("sv" (mode . verilog-mode))
		   ("python" (mode . python-mode))
))))

(add-hook 'ibuffer-mode-hook
	  (lambda ()
	    (ibuffer-switch-to-saved-filter-groups "default")))

;;to prevent the annoying "Buffer shell123 has a running process; kill it? (yes or no)
(setq kill-buffer-query-functions nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Learning Elisp with AI. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(global-visual-line-mode t)
(setq-default truncate-lines nil)
(setq word-wrap t)

(defun newday ()
  "i enter this command everyday"
  "format is following"
  " ~~~
    #
    #
    #
    2024/XX/XX"
  (interactive)
  (execute-kbd-macro (kbd "C-SPC"))
  (search-backward "~~~")
  (execute-kbd-macro (kbd "M-w M-> C-y"))
  (search-backward "~~~")
  (execute-kbd-macro (kbd "C-u 4 C-n")))

(defun gotodate ()
  (interactive)
  (search-backward "~~~"))

(defun execute-this-in-shell (text)
  "Insert the provided TEXT into the current buffer."
  ;;(interactive "sEnter text to insert: ")
  (insert text)
  (execute-kbd-macro (kbd "RET")))


(defun merge-tags (start end)
  "Merge the selected lines into a single '(setq tags-table-list ...)' statement."
  (interactive "r")
  (let ((text (buffer-substring-no-properties start end))
        lines combined-tags-table-list)
    (setq lines (split-string text "\n" t "[[:space:]]*")) ; Split the selected text into lines
    (setq combined-tags-table-list
          (mapconcat (lambda (line)
                       (if (string-match "(setq tags-table-list '(\\(.*\\)))" line)
                           (match-string 1 line)
                         line))
                     lines
                     " "))
    ;; Delete the original lines
    (delete-region start end)
    ;; Insert the combined line
    (insert (concat "(setq tags-table-list '(" combined-tags-table-list "))"))))

;;format i want
;; TAGS setup, where to find TAGS file, giving paths
;;(setq tags-table-list
;;      '("/way_to/path/path1" "/way_to/path/path2"))
;;(setq tags-table-list '("/Users/vincentgosselin1/Desktop/myPreciousLib/uvm_example/" "/Users/vincentgosselin1/Desktop/uvm-core-2020.3.0/src/"))

(defun sssd2 ()
  "passing the previous path from shell to prevent confusion in dired"
 (interactive)
 (dirs)
 (execute-kbd-macro (kbd "C-p C-a C-SPC C-e M-w M->"))
 (execute-kbd-macro (kbd "M-x sssd"))
 (insert "cd ")
 (execute-kbd-macro (kbd "C-y RET")))


(defun sssr2 ()
  "passing the previous path from shell to prevent confusion in dired"
 (interactive)
 (dirs)
 (execute-kbd-macro (kbd "C-p C-a C-SPC C-e M-w M->"))
 (execute-kbd-macro (kbd "M-x sssr"))
 (insert "cd ")
 (execute-kbd-macro (kbd "C-y RET")))

(defun sss2 ()
  "passing the previous path from shell to prevent confusion in dired"
 (interactive)
 (dirs)
 (execute-kbd-macro (kbd "C-p C-a C-SPC C-e M-w M->"))
 (execute-kbd-macro (kbd "M-x sss"))
 (insert "cd ")
 (execute-kbd-macro (kbd "C-y RET")))

(defun ttop ()
  "go to the top directory when deep in it!"
  (interactive)
  (execute-this-in-shell "cd ../../.."))


(defun deep1 ()
  "go to the deep directory1 from the top!"
  (interactive)
  (execute-this-in-shell "cd */*/adder_example"))
  
(defun my-backup-emacs-config ()
  "Copy the current .emacs file to ~/ with a timestamp appended to the filename."
  (interactive)
  (let* ((emacs-file (expand-file-name "~/.emacs"))
         (timestamp (format-time-string "%Y%m%d_%H%M%S"))
         (backup-file (expand-file-name (concat "~/.emacs_" timestamp))))
    (if (file-exists-p emacs-file)
        (progn
          (copy-file emacs-file backup-file t)
          (message "Backup created: %s" backup-file))
      (message ".emacs file does not exist"))))

(defalias 'backup 'my-backup-emacs-config)

;;this is my creation
(defun my-dive-into-ssh-shell ()
  (interactive)
  (dirs)
  (execute-kbd-macro (kbd "C-p C-a C-SPC C-e M-w M->"))
  (insert "debianp")
  (execute-kbd-macro (kbd "RET"))
  (insert "cd ")
  (execute-kbd-macro (kbd "C-y")))


(defalias 'ssshh 'my-dive-into-ssh-shell);

(defun my-quick-git-commit-and-push ()
  "Add the current buffer's file to Git, do a quick commit with an auto-incremented message, and push to the remote repository."
  (interactive)
  ;; Get the current buffer's file name
  (let ((file-name (buffer-file-name)))
    (when file-name
      ;; Step 1: Git add the file
      (shell-command (format "git add %s" (shell-quote-argument file-name)))
      ;; Step 2: Quick commit with auto-incremented message
      (let* ((commit-message (format "quick_commit_%d" (1+ (my-get-quick-commit-number)))))
        (shell-command (format "git commit -m \"%s\"" commit-message)))
      ;; Step 3: Git push
      (shell-command "git push"))))

(defun my-get-quick-commit-number ()
  "Get the latest quick commit number."
  (let ((commit-log (shell-command-to-string "git log --oneline")))
    (if (string-match "^quick_commit_\\([0-9]+\\):" commit-log)
        (string-to-number (match-string 1 commit-log))
      0)))

(defalias 'quicky 'my-quick-git-commit-and-push)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;;universal-ctags			       ;;
;; ;;https://www.emacswiki.org/emacs/BuildTags ;;
;; ;;https://github.com/universal-ctags/ctags  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;after building/installing it
;; cd /path/to/my/project
;;  ctags -e -R . *.sv *.svh
;;  ctags -e -R --languages=systemverilog
;;  ctags -e -R --languages=vhdl

(defun gentags_systemverilog ()
  "Generate tags for SystemVerilog files and write Dired path to a variable and tags-table-list."
  (interactive)
    ;; Step 1. Remove the last line starting with '(setq tags-table-list' in .emacs file
;;  (override-setq-value 'tags-table-list "")
  ;; Step 2: Generate tags for SystemVerilog files
  (shell-command "ctags -e -R --languages=systemverilog")
  ;; Step 3: Write Dired path to a variable and tags-table-list
  (write-dired-path-to-var-and-tags-table)
)


(defun gentags_vhdl ()
  "Generate tags for SystemVerilog files and write Dired path to a variable and tags-table-list."
  (interactive)
  ;; 1. Remove the last line starting with '(setq tags-table-list' in .emacs file

  ;;  (override-setq-value 'tags-table-list "")
  ;; Step 2: Generate tags for SystemVerilog files
  (shell-command "ctags -e -R --languages=vhdl")
  ;; Step 3: Write Dired path to a variable and tags-table-list
  (write-dired-path-to-var-and-tags-table)
  )


(defun gentags_python ()
  "Generate tags for SystemVerilog files and write Dired path to a variable and tags-table-list."
  (interactive)
  ;; 1. Remove the last line starting with '(setq tags-table-list' in .emacs file
;;  (override-setq-value 'tags-table-list "")
  ;; Step 2: Generate tags for SystemVerilog files
  (shell-command "ctags -e -R --languages=python")
  ;; Step 3: Write Dired path to a variable and tags-table-list
  (write-dired-path-to-var-and-tags-table)
  )


;;custom elisp, thx ai. 
(defun write-dired-path-to-var-and-tags-table ()
  "Write the current path of a Dired buldeffer to a variable and add it to tags-table-list in .emacs file."
  (interactive)
  ;; 1. Get the current path of the Dired buffer
  (let ((dired-path (if (derived-mode-p 'dired-mode)
                        (expand-file-name default-directory)
                      (error "Not in a Dired buffer"))))
    ;; 2. Write the path to a variable
    (setq var1 dired-path)
    ;; 3. Write to .emacs file
    (with-current-buffer (find-file-noselect "~/.emacs")
      (goto-char (point-max))
      (insert (format "(setq tags-table-list '(\"%s\"))\n" dired-path)))
    ;; 4. Provide feedback
    (message "Path '%s' written to variable 'var1' and added to tags-table-list in .emacs." dired-path)))

;;this is my second creation
(defun add_string_to_end_of_buffer ()
  (interactive)
  (save-excursion
  (execute-kbd-macro (kbd "C-SPC C-a C-<right> C-<left> M-w M-> C-y"))
  (insert " ")))

;;kick it!
(defalias 'k 'add_string_to_end_of_buffer);


;; TAGS will appear after this line after running write-dired-path-to-var-and-tags-table.

;; TAGS setup, where to find TAGS file, giving paths
;;(setq tags-table-list
;;      '("/way_to/path/path1" "/way_to/path/path2"))



